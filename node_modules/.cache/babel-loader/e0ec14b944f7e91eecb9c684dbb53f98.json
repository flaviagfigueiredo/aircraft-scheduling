{"ast":null,"code":"export const calculateUsage = timeline => {\n  const busyPeriods = timeline.filter(period => period.type === \"Busy\");\n  const sum = busyPeriods.reduce((acc, currentValue) => acc + currentValue.duration, 0);\n  return sum / 86400 * 100;\n};\nexport const calculateTimePeriods = rotation => rotation.reduce((acc, value, index) => {\n  if (index === 0) {\n    acc.push({\n      type: \"Free\",\n      duration: value.departuretime\n    });\n  }\n\n  acc.push({\n    type: \"Busy\",\n    duration: value.arrivaltime - value.departuretime\n  });\n\n  if (rotation[index + 1]) {\n    acc.push({\n      type: \"Turnaround\",\n      duration: 1200\n    });\n    acc.push({\n      type: \"Free\",\n      duration: rotation[index + 1].departuretime - value.arrivaltime + 1200\n    });\n  } else {\n    acc.push({\n      type: \"Free\",\n      duration: 86400 - value.arrivaltime\n    });\n  }\n\n  return acc;\n}, []);","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/utils/helpers/timeline.js"],"names":["calculateUsage","timeline","busyPeriods","filter","period","type","sum","reduce","acc","currentValue","duration","calculateTimePeriods","rotation","value","index","push","departuretime","arrivaltime"],"mappings":"AAAA,OAAO,MAAMA,cAAc,GAAIC,QAAD,IAAc;AACxC,QAAMC,WAAW,GAAGD,QAAQ,CAACE,MAAT,CAAiBC,MAAD,IAAYA,MAAM,CAACC,IAAP,KAAgB,MAA5C,CAApB;AAEA,QAAMC,GAAG,GAAGJ,WAAW,CAACK,MAAZ,CACR,CAACC,GAAD,EAAMC,YAAN,KAAuBD,GAAG,GAAGC,YAAY,CAACC,QADlC,EAER,CAFQ,CAAZ;AAKA,SAAQJ,GAAG,GAAG,KAAP,GAAgB,GAAvB;AACH,CATM;AAWP,OAAO,MAAMK,oBAAoB,GAAIC,QAAD,IAChCA,QAAQ,CAACL,MAAT,CAAgB,CAACC,GAAD,EAAMK,KAAN,EAAaC,KAAb,KAAuB;AACpC,MAAGA,KAAK,KAAK,CAAb,EAAgB;AACZN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEV,MAAAA,IAAI,EAAE,MAAR;AAAgBK,MAAAA,QAAQ,EAAEG,KAAK,CAACG;AAAhC,KAAT;AACH;;AAEDR,EAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEV,IAAAA,IAAI,EAAE,MAAR;AAAgBK,IAAAA,QAAQ,EAAEG,KAAK,CAACI,WAAN,GAAoBJ,KAAK,CAACG;AAApD,GAAT;;AAEA,MAAGJ,QAAQ,CAACE,KAAK,GAAG,CAAT,CAAX,EAAuB;AACnBN,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEV,MAAAA,IAAI,EAAE,YAAR;AAAsBK,MAAAA,QAAQ,EAAE;AAAhC,KAAT;AACAF,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEV,MAAAA,IAAI,EAAE,MAAR;AAAgBK,MAAAA,QAAQ,EAAGE,QAAQ,CAACE,KAAK,GAAG,CAAT,CAAR,CAAoBE,aAApB,GAAoCH,KAAK,CAACI,WAA1C,GAAwD;AAAnF,KAAT;AACH,GAHD,MAGO;AACHT,IAAAA,GAAG,CAACO,IAAJ,CAAS;AAAEV,MAAAA,IAAI,EAAE,MAAR;AAAgBK,MAAAA,QAAQ,EAAG,QAAQG,KAAK,CAACI;AAAzC,KAAT;AACH;;AAED,SAAOT,GAAP;AACH,CAfA,EAeG,EAfH,CADG","sourcesContent":["export const calculateUsage = (timeline) => {\n    const busyPeriods = timeline.filter((period) => period.type === \"Busy\");\n\n    const sum = busyPeriods.reduce(\n        (acc, currentValue) => acc + currentValue.duration,\n        0\n      );\n\n    return (sum / 86400) * 100\n}\n\nexport const calculateTimePeriods = (rotation) => (\n    rotation.reduce((acc, value, index) => {\n       if(index === 0) {\n           acc.push({ type: \"Free\", duration: value.departuretime});\n       }\n\n       acc.push({ type: \"Busy\", duration: value.arrivaltime - value.departuretime});\n\n       if(rotation[index + 1]){\n           acc.push({ type: \"Turnaround\", duration: 1200});\n           acc.push({ type: \"Free\", duration:  rotation[index + 1].departuretime - value.arrivaltime + 1200});\n       } else {\n           acc.push({ type: \"Free\", duration:  86400 - value.arrivaltime});\n       }\n\n       return acc;\n   },  [])\n);"]},"metadata":{},"sourceType":"module"}