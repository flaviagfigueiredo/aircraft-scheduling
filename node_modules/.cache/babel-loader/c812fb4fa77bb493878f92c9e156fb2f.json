{"ast":null,"code":"import { TURNAROUND_IN_SECONDS } from \"../constants\";\n/**\n *\n *\n * @param {*} flights\n * @param {*} currentFlightId\n * @param {*} previousFlightId\n * @return {*} \n */\n\nexport const checkIfValid = (flights, rotation, currentFlightId, previousFlightId) => {\n  const flight = flights.find(f => f.ident === currentFlightId);\n  const newRotationArray = [...rotation, flight];\n  const previousFlight = newRotationArray[previousFlightId - 1] || null;\n  const nextFlight = newRotationArray[previousFlightId + 1] || null; // First flight in rotation\n\n  if (!previousFlight && !nextFlight) {\n    return true;\n  } // If there's a flight already in the spot behind\n\n\n  if (previousFlight) {\n    if (previousFlight.arrivaltime + TURNAROUND_IN_SECONDS <= flight.departuretime && previousFlight.destination === flight.origin) {\n      return true;\n    }\n  }\n\n  if (nextFlight) {\n    if (flight.departuretime + TURNAROUND_IN_SECONDS <= nextFlight.arrivaltime && flight.destination === nextFlight.origin) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/utils/helpers/validations.js"],"names":["TURNAROUND_IN_SECONDS","checkIfValid","flights","rotation","currentFlightId","previousFlightId","flight","find","f","ident","newRotationArray","previousFlight","nextFlight","arrivaltime","departuretime","destination","origin"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,cAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,eAApB,EAAqCC,gBAArC,KAA0D;AAClF,QAAMC,MAAM,GAAGJ,OAAO,CAACK,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYL,eAA9B,CAAf;AACA,QAAMM,gBAAgB,GAAG,CAAE,GAAGP,QAAL,EAAeG,MAAf,CAAzB;AACA,QAAMK,cAAc,GAAGD,gBAAgB,CAACL,gBAAgB,GAAG,CAApB,CAAhB,IAA0C,IAAjE;AACA,QAAMO,UAAU,GAAGF,gBAAgB,CAACL,gBAAgB,GAAG,CAApB,CAAhB,IAA0C,IAA7D,CAJkF,CAMlF;;AACA,MAAG,CAACM,cAAD,IAAmB,CAACC,UAAvB,EAAmC;AAC/B,WAAO,IAAP;AACH,GATiF,CAWlF;;;AACA,MAAGD,cAAH,EAAkB;AACd,QAAIA,cAAc,CAACE,WAAf,GAA6Bb,qBAA7B,IAAsDM,MAAM,CAACQ,aAA7D,IAA8EH,cAAc,CAACI,WAAf,KAA+BT,MAAM,CAACU,MAAxH,EAAgI;AAC5H,aAAO,IAAP;AACH;AACJ;;AAED,MAAGJ,UAAH,EAAc;AACV,QAAGN,MAAM,CAACQ,aAAP,GAAuBd,qBAAvB,IAAgDY,UAAU,CAACC,WAA3D,IAA0EP,MAAM,CAACS,WAAP,KAAuBH,UAAU,CAACI,MAA/G,EAAuH;AACnH,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CAzBM","sourcesContent":["import { TURNAROUND_IN_SECONDS } from \"../constants\";\n\n/**\n *\n *\n * @param {*} flights\n * @param {*} currentFlightId\n * @param {*} previousFlightId\n * @return {*} \n */\nexport const checkIfValid = (flights, rotation, currentFlightId, previousFlightId) => {\n    const flight = flights.find(f => f.ident === currentFlightId);\n    const newRotationArray = [ ...rotation, flight];\n    const previousFlight = newRotationArray[previousFlightId - 1] || null;\n    const nextFlight = newRotationArray[previousFlightId + 1] || null;\n\n    // First flight in rotation\n    if(!previousFlight && !nextFlight) {\n        return true;\n    }\n\n    // If there's a flight already in the spot behind\n    if(previousFlight){\n        if( previousFlight.arrivaltime + TURNAROUND_IN_SECONDS <= flight.departuretime && previousFlight.destination === flight.origin) {\n            return true;\n        }\n    }\n\n    if(nextFlight){\n        if(flight.departuretime + TURNAROUND_IN_SECONDS <= nextFlight.arrivaltime && flight.destination === nextFlight.origin) {\n            return true;\n        }\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}