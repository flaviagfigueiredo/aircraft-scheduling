{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nexport default _s(url => {\n  _s();\n\n  const [response, setResponse] = useState(null);\n  const [error, setError] = useState(\"\");\n  const [loading, setloading] = useState(true);\n\n  const fetchData = () => {\n    axios.get(url).then(res => {\n      setResponse(res.data);\n    }).catch(err => {\n      setError(err);\n    }).finally(() => {\n      setloading(false);\n    });\n  };\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  return {\n    response,\n    error,\n    loading\n  };\n}, \"ppgTPXc3mbiU1BE1ez+qDl98uiI=\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/hooks/useAxios.jsx"],"names":["axios","useEffect","useState","url","response","setResponse","error","setError","loading","setloading","fetchData","get","then","res","data","catch","err","finally"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AAEA,kBAAgBC,GAAD,IAAS;AAAA;;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BH,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMQ,SAAS,GAAG,MAAM;AACpBV,IAAAA,KAAK,CACAW,GADL,CACSR,GADT,EAEKS,IAFL,CAEWC,GAAD,IAAS;AACXR,MAAAA,WAAW,CAACQ,GAAG,CAACC,IAAL,CAAX;AACH,KAJL,EAKKC,KALL,CAKYC,GAAD,IAAS;AACZT,MAAAA,QAAQ,CAACS,GAAD,CAAR;AACH,KAPL,EAQKC,OARL,CAQa,MAAM;AACXR,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KAVL;AAWH,GAZD;;AAcAR,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,SAAS;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AAAEN,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CAxBD","sourcesContent":["import axios from \"axios\";\nimport { useEffect, useState } from \"react\";\n\nexport default (url) => {\n    const [response, setResponse] = useState(null);\n    const [error, setError] = useState(\"\");\n    const [loading, setloading] = useState(true);\n\n    const fetchData = () => {\n        axios\n            .get(url)\n            .then((res) => {\n                setResponse(res.data);\n            })\n            .catch((err) => {\n                setError(err);\n            })\n            .finally(() => {\n                setloading(false);\n            });\n    };\n\n    useEffect(() => {\n        fetchData();\n    }, []);\n\n    return { response, error, loading };\n};\n\n\n"]},"metadata":{},"sourceType":"module"}