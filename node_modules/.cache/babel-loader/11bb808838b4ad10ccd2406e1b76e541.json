{"ast":null,"code":"var _jsxFileName = \"/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport Timeline from \"../Timeline/Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport RotationList from \"../RotationList/RotationList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n_c = Wrapper;\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n_c2 = Header;\n\nfunction Dashboard() {\n  _s();\n\n  const [rotation, setRotation] = useState(flights.slice(2, 1));\n  const [availableFlights, setAvailableFlights] = useState(flights);\n  const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n  const usage = useMemo(() => calculateUsage(periods), [periods]);\n  const removeFromRotation = useCallback(ident => {\n    const flight = rotation.find(flight => flight.ident === ident);\n    setRotation(rotation.filter(flight => flight.ident !== ident));\n    setAvailableFlights(prev => [...prev, flight]);\n  }, []);\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n\n    if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\") {\n      return;\n    }\n\n    if (destination.droppableId == \"rotation\") {\n      // Departure Airport of the flight must be the same of the previous flight\n      if (checkIfValid(flights, rotation, draggableId, destination.index)) {\n        const r = move(availableFlights, rotation, source, destination);\n        setRotation(r.rotation);\n        setAvailableFlights(r.droppable);\n      }\n\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: \"250px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Aircrafts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: aircrafts.map(aircraft => /*#__PURE__*/_jsxDEV(AircraftCard, {\n            aircraft: aircraft,\n            percentage: usage\n          }, aircraft.ident, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: 'Rotation',\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"rotation\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [rotation.map((flight, index) => /*#__PURE__*/_jsxDEV(RotationCard, {\n              index: index,\n              flight: flight,\n              onRemove: () => onRemove(flight.ident)\n            }, flight.ident, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 29\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RotationList, {\n        rotation: rotation,\n        onRemove: removeFromRotation\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          width: \"250px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Available Flights\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [availableFlights.map((flight, index) => /*#__PURE__*/_jsxDEV(Flight, {\n              index: index,\n              flight: flight\n            }, flight.ident, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 33\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"HQiL0BxbfQPWIyw0qw8n3KxIdfc=\");\n\n_c3 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx"],"names":["React","useState","useMemo","useCallback","DragDropContext","Droppable","AircraftCard","Flight","List","move","Timeline","DroppableList","checkIfValid","aircrafts","flights","calculateTimePeriods","calculateUsage","styled","RotationList","Wrapper","div","Header","h2","Dashboard","rotation","setRotation","slice","availableFlights","setAvailableFlights","periods","usage","removeFromRotation","ident","flight","find","filter","prev","onDragEnd","result","source","destination","draggableId","droppableId","index","r","droppable","display","flexDirection","alignItems","width","map","aircraft","provided","innerRef","onRemove","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport Timeline from \"../Timeline/Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport RotationList from \"../RotationList/RotationList\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n\nfunction Dashboard() {\n    const [ rotation, setRotation ] = useState(flights.slice(2,1));\n    const [ availableFlights, setAvailableFlights ] = useState(flights);\n\n    const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n    const usage = useMemo(() => calculateUsage(periods), [periods]);\n\n    const removeFromRotation = useCallback((ident) => {\n        const flight = rotation.find((flight) => flight.ident === ident);\n        setRotation(rotation.filter((flight) => flight.ident !== ident));\n        setAvailableFlights(prev => [...prev, flight]);\n\n    }, [])\n\n    const onDragEnd = (result) => {\n        const { source, destination, draggableId } = result;\n\n        if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\" ) {\n            return;\n        }\n\n        if (destination.droppableId == \"rotation\") {\n\n            // Departure Airport of the flight must be the same of the previous flight\n            if(checkIfValid(flights, rotation, draggableId, destination.index)) {\n                const r = move(availableFlights, rotation, source, destination);\n                setRotation(r.rotation);\n                setAvailableFlights(r.droppable);\n            }\n            \n            return;\n        }\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Wrapper>\n                {/* Aircrafts List */}\n                <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\",  width: \"250px\" }}>\n                    <Header>Aircrafts</Header>\n                    <List>\n                        {aircrafts.map((aircraft) => (\n                            <AircraftCard key={aircraft.ident} aircraft={aircraft} percentage={usage} />\n                        ))}\n                    </List>\n                </div>\n                {/* Rotation */}\n                <DroppableList title={'Rotation'} >\n                    <Droppable droppableId={\"rotation\"}>\n                        {(provided) => (\n                        <List innerRef={provided.innerRef}>\n                            {rotation.map((flight, index) => (\n                            <RotationCard\n                                key={flight.ident}\n                                index={index}\n                                flight={flight}\n                                onRemove={() => onRemove(flight.ident)}\n                        />))}\n                        {provided.placeholder}\n                    </List>\n                    )}\n                </Droppable>\n                </DroppableList>\n                <RotationList rotation={rotation} onRemove={removeFromRotation}/>\n                {/* Flight List */}\n                <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\",  width: \"250px\" }}>\n                <Header>Available Flights</Header>\n                <Droppable droppableId={\"droppable\"}>\n                    {(provided) => (\n                        <List innerRef={provided.innerRef}>\n                            {availableFlights.map((flight, index) => (\n                                <Flight\n                                    key={flight.ident}\n                                    index={index}\n                                    flight={flight}\n                                />)\n                            )}\n                            {provided.placeholder}\n                        </List>)}\n                </Droppable>\n                </div>\n            </Wrapper>\n        </DragDropContext>);\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}