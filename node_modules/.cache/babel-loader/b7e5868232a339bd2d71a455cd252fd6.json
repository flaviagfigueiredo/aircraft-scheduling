{"ast":null,"code":"var _jsxFileName = \"/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport Card from \"../Card/Card\";\nimport useGetFilghts from \"../../hooks/useGetFilghts\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n_c = Wrapper;\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\nurl = \"https://infinite-dawn-93085.herokuapp.com/flights\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [rotation, setRotation] = useState([]);\n  const [availableFlights, setAvailableFlights] = useState([]);\n  const {\n    response,\n    error,\n    loading\n  } = useGetFilghts();\n  useEffect(() => {\n    if (response) {\n      setAvailableFlights(response.data);\n    }\n  }, [response]);\n  console.log(response, error, loading);\n  const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n  const usage = useMemo(() => calculateUsage(periods), [periods]);\n  const removeFromRotation = useCallback(id => {\n    const flight = rotation.find(f => f.id === id);\n    setRotation(rotation.filter(f => f !== flight));\n    setAvailableFlights(prev => [flight, ...prev]);\n  }, [rotation]);\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n\n    if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\") {\n      return;\n    }\n\n    if (destination.droppableId == \"rotation\") {\n      // Departure Airport of the flight must be the same of the previous flight\n      if (checkIfValid(flights, rotation, draggableId, destination.index)) {\n        const r = move(availableFlights, rotation, source, destination);\n        setRotation(r.rotation);\n        setAvailableFlights(r.droppable);\n      }\n\n      return;\n    }\n  };\n\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"IsLoading\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 16\n  }, this);\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Aircrafts\",\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: aircrafts.map(aircraft => /*#__PURE__*/_jsxDEV(AircraftCard, {\n            aircraft: aircraft,\n            percentage: usage\n          }, aircraft.ident, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Rotation\",\n        children: [/*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"rotation\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [rotation.map((flight, index) => /*#__PURE__*/_jsxDEV(Card, {\n              index: index,\n              flight: flight,\n              onRemove: removeFromRotation\n            }, flight.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 41\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Timeline, {\n          periods: periods\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Available Flights\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [availableFlights.map((flight, index) => /*#__PURE__*/_jsxDEV(Card, {\n              index: index,\n              flight: flight\n            }, flight.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"6gcJnXZeovbaKHLsPdbO2HlfLC4=\", false, function () {\n  return [useGetFilghts];\n});\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx"],"names":["React","useState","useMemo","useCallback","useEffect","DragDropContext","Droppable","AircraftCard","Flight","List","move","Timeline","DroppableList","checkIfValid","aircrafts","flights","calculateTimePeriods","calculateUsage","styled","Card","useGetFilghts","Wrapper","div","Header","h2","url","Dashboard","rotation","setRotation","availableFlights","setAvailableFlights","response","error","loading","data","console","log","periods","usage","removeFromRotation","id","flight","find","f","filter","prev","onDragEnd","result","source","destination","draggableId","droppableId","index","r","droppable","map","aircraft","ident","provided","innerRef","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport Card from \"../Card/Card\";\nimport useGetFilghts from \"../../hooks/useGetFilghts\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n\nurl = \"https://infinite-dawn-93085.herokuapp.com/flights\";\n\nconst Dashboard = () => {\n    const [ rotation, setRotation ] = useState([]);\n    const [ availableFlights, setAvailableFlights ] = useState([]);\n\n    const { response, error, loading } = useGetFilghts();\n\n    useEffect(() => {\n        if(response) {\n            setAvailableFlights(response.data);\n        }\n    }, [response]);\n\n    console.log(response, error, loading);\n\n    const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n    const usage = useMemo(() => calculateUsage(periods), [periods]);\n\n    const removeFromRotation = useCallback((id) => {\n        const flight = rotation.find(f => f.id === id);\n        setRotation(rotation.filter(f => f !== flight));\n        setAvailableFlights(prev => [ flight, ...prev ]);\n\n    }, [rotation])\n\n    const onDragEnd = (result) => {\n        const { source, destination, draggableId } = result;\n\n        if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\" ) {\n            return;\n        }\n\n        if (destination.droppableId == \"rotation\") {\n\n            // Departure Airport of the flight must be the same of the previous flight\n            if(checkIfValid(flights, rotation, draggableId, destination.index)) {\n                const r = move(availableFlights, rotation, source, destination);\n                setRotation(r.rotation);\n                setAvailableFlights(r.droppable);\n            }\n            \n            return;\n        }\n    };\n\n    if(loading)\n        return(<div>IsLoading</div>)\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Wrapper>\n\n                {/* Aircrafts List */}\n                <DroppableList title=\"Aircrafts\" >\n                    <List>\n                        {aircrafts.map((aircraft) => (\n                            <AircraftCard key={aircraft.ident} aircraft={aircraft} percentage={usage} />\n                        ))}\n                    </List>\n                </DroppableList>\n\n                {/* Rotation */}\n                <DroppableList title=\"Rotation\" >\n                    <Droppable droppableId=\"rotation\">\n                            {(provided) => (\n                                <List innerRef={provided.innerRef}>\n                                    {rotation.map((flight, index) => (\n                                        <Card\n                                        key={flight.id}\n                                        index={index}\n                                        flight={flight}\n                                        onRemove={removeFromRotation}/>)\n                                    )}\n                                {provided.placeholder}\n                            </List>)}\n                    </Droppable>\n                    <Timeline periods={periods}/>\n                </DroppableList>\n\n                {/* Flight List */}\n                <DroppableList title=\"Available Flights\" >\n                    <Droppable droppableId=\"droppable\">\n                        {(provided) => (\n                            <List innerRef={provided.innerRef}>\n                                {availableFlights.map((flight, index) => (\n                                    <Card\n                                        key={flight.id}\n                                        index={index}\n                                        flight={flight}\n                                    />)\n                                )}\n                                {provided.placeholder}\n                            </List>)}\n                    </Droppable>\n                </DroppableList>\n            </Wrapper>\n        </DragDropContext>);\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}