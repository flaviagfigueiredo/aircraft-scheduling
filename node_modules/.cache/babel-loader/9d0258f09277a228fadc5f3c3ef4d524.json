{"ast":null,"code":"import { TURNAROUND_IN_SECONDS } from \"../constants\";\n/**\n *\n *\n * @param {*} flights\n * @param {*} currentFlightId\n * @param {*} previousFlightId\n * @return {*} \n */\n\nexport const checkIfValid = (flights, rotation, currentFlightId, previousFlightId) => {\n  const flight = flights.find(f => f.ident === currentFlightId);\n  const newRotationArray = [...rotation, flight];\n  const previousFlight = newRotationArray[previousFlightId - 1] || null;\n  const nextFlight = newRotationArray[previousFlightId + 1] || null; // First flight in rotation\n\n  if (!previousFlight && !nextFlight) {\n    return true;\n  } // If there's a flight already in the spot behind\n\n\n  if (previousFlight) {\n    console.log(\"previousFlight\", previousFlight);\n    console.log(\"flight\", flight);\n    console.log(\"previousFlight departure\", previousFlight.departuretime + TURNAROUND_IN_SECONDS);\n    console.log(\"flight arrival\", flight.arrivaltime);\n    console.log(previousFlight.destination, flight.origin);\n\n    if (previousFlight.departuretime + TURNAROUND_IN_SECONDS <= flight.arrivaltime && previousFlight.destination === flight.origin) {\n      return true;\n    }\n  }\n\n  if (nextFlight) {\n    console.log(\"nextFlight\", nextFlight);\n    console.log(\"flight\", flight);\n    console.log(flight.departuretime + TURNAROUND_IN_SECONDS, nextFlight.arrivaltime);\n    console.log(flight.destination, nextFlight.origin);\n\n    if (flight.departuretime + TURNAROUND_IN_SECONDS <= nextFlight.arrivaltime && flight.destination === nextFlight.origin) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/utils/helpers/validations.js"],"names":["TURNAROUND_IN_SECONDS","checkIfValid","flights","rotation","currentFlightId","previousFlightId","flight","find","f","ident","newRotationArray","previousFlight","nextFlight","console","log","departuretime","arrivaltime","destination","origin"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,cAAtC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,OAAD,EAAUC,QAAV,EAAoBC,eAApB,EAAqCC,gBAArC,KAA0D;AAClF,QAAMC,MAAM,GAAGJ,OAAO,CAACK,IAAR,CAAaC,CAAC,IAAIA,CAAC,CAACC,KAAF,KAAYL,eAA9B,CAAf;AACA,QAAMM,gBAAgB,GAAG,CAAE,GAAGP,QAAL,EAAeG,MAAf,CAAzB;AACA,QAAMK,cAAc,GAAGD,gBAAgB,CAACL,gBAAgB,GAAG,CAApB,CAAhB,IAA0C,IAAjE;AACA,QAAMO,UAAU,GAAGF,gBAAgB,CAACL,gBAAgB,GAAG,CAApB,CAAhB,IAA0C,IAA7D,CAJkF,CAMlF;;AACA,MAAG,CAACM,cAAD,IAAmB,CAACC,UAAvB,EAAmC;AAC/B,WAAO,IAAP;AACH,GATiF,CAWlF;;;AACA,MAAGD,cAAH,EAAkB;AACdE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,cAA9B;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,MAAtB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ,EAAwCH,cAAc,CAACI,aAAf,GAA+Bf,qBAAvE;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BR,MAAM,CAACU,WAArC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYH,cAAc,CAACM,WAA3B,EAAwCX,MAAM,CAACY,MAA/C;;AAEA,QAAIP,cAAc,CAACI,aAAf,GAA+Bf,qBAA/B,IAAwDM,MAAM,CAACU,WAA/D,IAA8EL,cAAc,CAACM,WAAf,KAA+BX,MAAM,CAACY,MAAxH,EAAgI;AAC5H,aAAO,IAAP;AACH;AACJ;;AAED,MAAGN,UAAH,EAAc;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BF,UAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBR,MAAtB;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACS,aAAP,GAAuBf,qBAAnC,EAA0DY,UAAU,CAACI,WAArE;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACW,WAAnB,EAAgCL,UAAU,CAACM,MAA3C;;AAEA,QAAGZ,MAAM,CAACS,aAAP,GAAuBf,qBAAvB,IAAgDY,UAAU,CAACI,WAA3D,IAA0EV,MAAM,CAACW,WAAP,KAAuBL,UAAU,CAACM,MAA/G,EAAuH;AACnH,aAAO,IAAP;AACH;AACJ;;AAED,SAAO,KAAP;AACH,CApCM","sourcesContent":["import { TURNAROUND_IN_SECONDS } from \"../constants\";\n\n/**\n *\n *\n * @param {*} flights\n * @param {*} currentFlightId\n * @param {*} previousFlightId\n * @return {*} \n */\nexport const checkIfValid = (flights, rotation, currentFlightId, previousFlightId) => {\n    const flight = flights.find(f => f.ident === currentFlightId);\n    const newRotationArray = [ ...rotation, flight];\n    const previousFlight = newRotationArray[previousFlightId - 1] || null;\n    const nextFlight = newRotationArray[previousFlightId + 1] || null;\n\n    // First flight in rotation\n    if(!previousFlight && !nextFlight) {\n        return true;\n    }\n\n    // If there's a flight already in the spot behind\n    if(previousFlight){\n        console.log(\"previousFlight\", previousFlight);\n        console.log(\"flight\", flight);\n        console.log(\"previousFlight departure\", previousFlight.departuretime + TURNAROUND_IN_SECONDS)\n        console.log(\"flight arrival\", flight.arrivaltime);\n        console.log(previousFlight.destination, flight.origin);\n\n        if( previousFlight.departuretime + TURNAROUND_IN_SECONDS <= flight.arrivaltime && previousFlight.destination === flight.origin) {\n            return true;\n        }\n    }\n\n    if(nextFlight){\n        console.log(\"nextFlight\", nextFlight);\n        console.log(\"flight\", flight);\n        console.log(flight.departuretime + TURNAROUND_IN_SECONDS, nextFlight.arrivaltime );\n        console.log(flight.destination, nextFlight.origin);\n\n        if(flight.departuretime + TURNAROUND_IN_SECONDS <= nextFlight.arrivaltime && flight.destination === nextFlight.origin) {\n            return true;\n        }\n    }\n\n    return false;\n};\n"]},"metadata":{},"sourceType":"module"}