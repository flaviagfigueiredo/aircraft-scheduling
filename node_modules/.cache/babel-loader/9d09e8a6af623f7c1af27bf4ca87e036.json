{"ast":null,"code":"var _jsxFileName = \"/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport Card from \"../Card/Card\";\nimport useGetFilghts from \"../../hooks/useGetFilghts\";\nimport { Wrapper } from \"./styles\";\nimport useGetAircraft from \"../../hooks/useGetAircraft\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Dashboard = () => {\n  _s();\n\n  const [rotation, setRotation] = useState([]);\n  const [availableFlights, setAvailableFlights] = useState([]);\n  const [aircrafts, setAircrafts] = useState([]);\n  const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n  const usage = useMemo(() => calculateUsage(periods), [periods]);\n  const {\n    response: flights,\n    error: isErrorFlightFetch,\n    loading: isLoadingFlightFetch\n  } = useGetFilghts();\n  const {\n    response: fetchedAircrafts,\n    error: isErrorAircraftFetch,\n    loading: isLoadingAircraftFetch\n  } = useGetAircraft();\n  console.log(aircrafts);\n  useEffect(() => {\n    if (flights) {\n      setAvailableFlights(flights.data);\n    }\n  }, [flights]);\n  useEffect(() => {\n    if (fetchedAircrafts) {\n      setAircrafts(fetchedAircrafts.data);\n    }\n  }, [fetchedAircrafts]);\n  const removeFromRotation = useCallback(id => {\n    const flight = rotation.find(f => f.id === id);\n    setRotation(rotation.filter(f => f !== flight));\n    setAvailableFlights(prev => [flight, ...prev]);\n  }, [rotation]);\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n\n    if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\") {\n      return;\n    }\n\n    if (destination.droppableId == \"rotation\") {\n      // Departure Airport of the flight must be the same of the previous flight\n      if (checkIfValid(flights.data, rotation, draggableId, destination.index)) {\n        const r = move(availableFlights, rotation, source, destination);\n        setRotation(r.rotation);\n        setAvailableFlights(r.droppable);\n      }\n\n      return;\n    }\n  };\n\n  if (isLoadingFlightFetch && isLoadingAircraftFetch) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"IsLoading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: [/*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Aircrafts\",\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: aircrafts.map(aircraft => /*#__PURE__*/_jsxDEV(AircraftCard, {\n            aircraft: aircraft,\n            percentage: usage\n          }, aircraft.ident, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Rotation\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"rotation\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [rotation.map((flight, index) => /*#__PURE__*/_jsxDEV(Card, {\n              index: index,\n              flight: flight,\n              onRemove: removeFromRotation\n            }, flight.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 41\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Available Flights\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [availableFlights.map((flight, index) => /*#__PURE__*/_jsxDEV(Card, {\n              index: index,\n              flight: flight\n            }, flight.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Timeline, {\n      periods: periods\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"OTqkEEVUtcg4hapvJhEOrSpacXk=\", false, function () {\n  return [useGetFilghts, useGetAircraft];\n});\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx"],"names":["React","useState","useMemo","useCallback","useEffect","DragDropContext","Droppable","AircraftCard","List","move","Timeline","DroppableList","checkIfValid","calculateTimePeriods","calculateUsage","Card","useGetFilghts","Wrapper","useGetAircraft","Dashboard","rotation","setRotation","availableFlights","setAvailableFlights","aircrafts","setAircrafts","periods","usage","response","flights","error","isErrorFlightFetch","loading","isLoadingFlightFetch","fetchedAircrafts","isErrorAircraftFetch","isLoadingAircraftFetch","console","log","data","removeFromRotation","id","flight","find","f","filter","prev","onDragEnd","result","source","destination","draggableId","droppableId","index","r","droppable","map","aircraft","ident","provided","innerRef","placeholder"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,EAAmCC,WAAnC,EAAgDC,SAAhD,QAAiE,OAAjE;AACA,SAASC,eAAT,EAA0BC,SAA1B,QAA2C,qBAA3C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,IAAT,QAAqB,SAArB;AACA,SAASC,IAAT,QAAqB,yBAArB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,oBAAT,EAA+BC,cAA/B,QAAqD,8BAArD;AACA,OAAOC,IAAP,MAAiB,cAAjB;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,SAASC,OAAT,QAAwB,UAAxB;AACA,OAAOC,cAAP,MAA2B,4BAA3B;;;AAIA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BpB,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAEqB,gBAAF,EAAoBC,mBAApB,IAA4CtB,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAAEuB,SAAF,EAAaC,YAAb,IAA8BxB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAMyB,OAAO,GAAGxB,OAAO,CAAC,MAAMW,oBAAoB,CAACO,QAAD,CAA3B,EAAuC,CAACA,QAAD,CAAvC,CAAvB;AACA,QAAMO,KAAK,GAAGzB,OAAO,CAAC,MAAMY,cAAc,CAACY,OAAD,CAArB,EAAgC,CAACA,OAAD,CAAhC,CAArB;AAEA,QAAM;AAAEE,IAAAA,QAAQ,EAAEC,OAAZ;AAAqBC,IAAAA,KAAK,EAAEC,kBAA5B;AAAgDC,IAAAA,OAAO,EAAEC;AAAzD,MAAkFjB,aAAa,EAArG;AACA,QAAM;AAAEY,IAAAA,QAAQ,EAAEM,gBAAZ;AAA8BJ,IAAAA,KAAK,EAAEK,oBAArC;AAA2DH,IAAAA,OAAO,EAAEI;AAApE,MAA+FlB,cAAc,EAAnH;AAEAmB,EAAAA,OAAO,CAACC,GAAR,CAAYd,SAAZ;AAEApB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGyB,OAAH,EAAY;AACRN,MAAAA,mBAAmB,CAACM,OAAO,CAACU,IAAT,CAAnB;AACH;AACJ,GAJQ,EAIN,CAACV,OAAD,CAJM,CAAT;AAMAzB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAG8B,gBAAH,EAAqB;AACjBT,MAAAA,YAAY,CAACS,gBAAgB,CAACK,IAAlB,CAAZ;AACH;AACJ,GAJQ,EAIN,CAACL,gBAAD,CAJM,CAAT;AAMA,QAAMM,kBAAkB,GAAGrC,WAAW,CAAEsC,EAAD,IAAQ;AAC3C,UAAMC,MAAM,GAAGtB,QAAQ,CAACuB,IAAT,CAAcC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA5B,CAAf;AACApB,IAAAA,WAAW,CAACD,QAAQ,CAACyB,MAAT,CAAgBD,CAAC,IAAIA,CAAC,KAAKF,MAA3B,CAAD,CAAX;AACAnB,IAAAA,mBAAmB,CAACuB,IAAI,IAAI,CAAEJ,MAAF,EAAU,GAAGI,IAAb,CAAT,CAAnB;AAEH,GALqC,EAKnC,CAAC1B,QAAD,CALmC,CAAtC;;AAOA,QAAM2B,SAAS,GAAIC,MAAD,IAAY;AAC1B,UAAM;AAAEC,MAAAA,MAAF;AAAUC,MAAAA,WAAV;AAAuBC,MAAAA;AAAvB,QAAuCH,MAA7C;;AAEA,QAAI,CAACE,WAAD,IAAgBD,MAAM,CAACG,WAAP,IAAsB,UAAtC,IAAoDF,WAAW,CAACE,WAAZ,KAA4B,WAApF,EAAkG;AAC9F;AACH;;AAED,QAAIF,WAAW,CAACE,WAAZ,IAA2B,UAA/B,EAA2C;AAEvC;AACA,UAAGxC,YAAY,CAACiB,OAAO,CAACU,IAAT,EAAenB,QAAf,EAAyB+B,WAAzB,EAAsCD,WAAW,CAACG,KAAlD,CAAf,EAAyE;AACrE,cAAMC,CAAC,GAAG7C,IAAI,CAACa,gBAAD,EAAmBF,QAAnB,EAA6B6B,MAA7B,EAAqCC,WAArC,CAAd;AACA7B,QAAAA,WAAW,CAACiC,CAAC,CAAClC,QAAH,CAAX;AACAG,QAAAA,mBAAmB,CAAC+B,CAAC,CAACC,SAAH,CAAnB;AACH;;AAED;AACH;AACJ,GAlBD;;AAoBA,MAAGtB,oBAAoB,IAAIG,sBAA3B,EAAmD;AAC/C,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AAED,sBACI,QAAC,eAAD;AAAiB,IAAA,SAAS,EAAEW,SAA5B;AAAA,4BACI,QAAC,OAAD;AAAA,8BAGI,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC,WAArB;AAAA,+BACI,QAAC,IAAD;AAAA,oBACKvB,SAAS,CAACgC,GAAV,CAAeC,QAAD,iBACX,QAAC,YAAD;AAAmC,YAAA,QAAQ,EAAEA,QAA7C;AAAuD,YAAA,UAAU,EAAE9B;AAAnE,aAAmB8B,QAAQ,CAACC,KAA5B;AAAA;AAAA;AAAA;AAAA,kBADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAYI,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC,UAArB;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,WAAW,EAAC,UAAvB;AAAA,oBACUC,QAAD,iBACG,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAEA,QAAQ,CAACC,QAAzB;AAAA,uBACKxC,QAAQ,CAACoC,GAAT,CAAa,CAACd,MAAD,EAASW,KAAT,kBACV,QAAC,IAAD;AAEA,cAAA,KAAK,EAAEA,KAFP;AAGA,cAAA,MAAM,EAAEX,MAHR;AAIA,cAAA,QAAQ,EAAEF;AAJV,eACKE,MAAM,CAACD,EADZ;AAAA;AAAA;AAAA;AAAA,oBADH,CADL,EAQCkB,QAAQ,CAACE,WARV;AAAA;AAAA;AAAA;AAAA;AAAA;AAFZ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAZJ,eA8BI,QAAC,aAAD;AAAe,QAAA,KAAK,EAAC,mBAArB;AAAA,+BACI,QAAC,SAAD;AAAW,UAAA,WAAW,EAAC,WAAvB;AAAA,oBACMF,QAAD,iBACG,QAAC,IAAD;AAAM,YAAA,QAAQ,EAAEA,QAAQ,CAACC,QAAzB;AAAA,uBACKtC,gBAAgB,CAACkC,GAAjB,CAAqB,CAACd,MAAD,EAASW,KAAT,kBAClB,QAAC,IAAD;AAEI,cAAA,KAAK,EAAEA,KAFX;AAGI,cAAA,MAAM,EAAEX;AAHZ,eACSA,MAAM,CAACD,EADhB;AAAA;AAAA;AAAA;AAAA,oBADH,CADL,EAQKkB,QAAQ,CAACE,WARd;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cA9BJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAgDI,QAAC,QAAD;AAAU,MAAA,OAAO,EAAEnC;AAAnB;AAAA;AAAA;AAAA;AAAA,YAhDJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAmDH,CA1GD;;GAAMP,S;UAOsFH,a,EACaE,c;;;KARnGC,S;AA4GN,eAAeA,SAAf","sourcesContent":["import React, { useState, useMemo, useCallback, useEffect } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport Card from \"../Card/Card\";\nimport useGetFilghts from \"../../hooks/useGetFilghts\";\nimport { Wrapper } from \"./styles\";\nimport useGetAircraft from \"../../hooks/useGetAircraft\";\n\n\n\nconst Dashboard = () => {\n    const [ rotation, setRotation ] = useState([]);\n    const [ availableFlights, setAvailableFlights ] = useState([]);\n    const [ aircrafts, setAircrafts ] = useState([]);\n    const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n    const usage = useMemo(() => calculateUsage(periods), [periods]);\n\n    const { response: flights, error: isErrorFlightFetch, loading: isLoadingFlightFetch } = useGetFilghts();\n    const { response: fetchedAircrafts, error: isErrorAircraftFetch, loading: isLoadingAircraftFetch } = useGetAircraft();\n\n    console.log(aircrafts);\n\n    useEffect(() => {\n        if(flights) {\n            setAvailableFlights(flights.data);\n        }\n    }, [flights]);\n\n    useEffect(() => {\n        if(fetchedAircrafts) {\n            setAircrafts(fetchedAircrafts.data);\n        }\n    }, [fetchedAircrafts]);\n\n    const removeFromRotation = useCallback((id) => {\n        const flight = rotation.find(f => f.id === id);\n        setRotation(rotation.filter(f => f !== flight));\n        setAvailableFlights(prev => [ flight, ...prev ]);\n\n    }, [rotation])\n\n    const onDragEnd = (result) => {\n        const { source, destination, draggableId } = result;\n\n        if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\" ) {\n            return;\n        }\n\n        if (destination.droppableId == \"rotation\") {\n\n            // Departure Airport of the flight must be the same of the previous flight\n            if(checkIfValid(flights.data, rotation, draggableId, destination.index)) {\n                const r = move(availableFlights, rotation, source, destination);\n                setRotation(r.rotation);\n                setAvailableFlights(r.droppable);\n            }\n            \n            return;\n        }\n    };\n\n    if(isLoadingFlightFetch && isLoadingAircraftFetch) {\n        return (<div>IsLoading</div>);\n    }\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Wrapper>\n\n                {/* Aircrafts List */}\n                <DroppableList title=\"Aircrafts\" >\n                    <List>\n                        {aircrafts.map((aircraft) => (\n                            <AircraftCard key={aircraft.ident} aircraft={aircraft} percentage={usage} />\n                        ))}\n                    </List>\n                </DroppableList>\n\n                {/* Rotation */}\n                <DroppableList title=\"Rotation\" >\n                    <Droppable droppableId=\"rotation\">\n                            {(provided) => (\n                                <List innerRef={provided.innerRef}>\n                                    {rotation.map((flight, index) => (\n                                        <Card\n                                        key={flight.id}\n                                        index={index}\n                                        flight={flight}\n                                        onRemove={removeFromRotation}/>)\n                                    )}\n                                {provided.placeholder}\n                            </List>)}\n                    </Droppable>\n                </DroppableList>\n                  \n\n                {/* Flight List */}\n                <DroppableList title=\"Available Flights\" >\n                    <Droppable droppableId=\"droppable\">\n                        {(provided) => (\n                            <List innerRef={provided.innerRef}>\n                                {availableFlights.map((flight, index) => (\n                                    <Card\n                                        key={flight.id}\n                                        index={index}\n                                        flight={flight}\n                                    />)\n                                )}\n                                {provided.placeholder}\n                            </List>)}\n                    </Droppable>\n                </DroppableList>\n\n            </Wrapper>\n            <Timeline periods={periods}/>\n        </DragDropContext>);\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}