{"ast":null,"code":"var _jsxFileName = \"/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo, useCallback } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport RotationCard from \"../RotationCard/RotationCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n_c = Wrapper;\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n\nfunction Dashboard() {\n  _s();\n\n  const [rotation, setRotation] = useState([]);\n  const [availableFlights, setAvailableFlights] = useState(flights);\n  const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n  const usage = useMemo(() => calculateUsage(periods), [periods]);\n  const removeFromRotation = useCallback(ident => {\n    const flight = rotation.find(f => f.ident === ident);\n    setRotation(rotation.filter(f => f !== flight));\n    setAvailableFlights(prev => [flight, ...prev]);\n  }, [rotation]);\n\n  const onDragEnd = result => {\n    const {\n      source,\n      destination,\n      draggableId\n    } = result;\n\n    if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\") {\n      return;\n    }\n\n    if (destination.droppableId == \"rotation\") {\n      // Departure Airport of the flight must be the same of the previous flight\n      if (checkIfValid(flights, rotation, draggableId, destination.index)) {\n        const r = move(availableFlights, rotation, source, destination);\n        setRotation(r.rotation);\n        setAvailableFlights(r.droppable);\n      }\n\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: onDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Wrapper, {\n      children: [/*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Aircrafts\",\n        children: /*#__PURE__*/_jsxDEV(List, {\n          children: aircrafts.map(aircraft => /*#__PURE__*/_jsxDEV(Card, {\n            aircraft: aircraft,\n            percentage: usage\n          }, aircraft.ident, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Rotation\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"rotation\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [rotation.map((flight, index) => /*#__PURE__*/_jsxDEV(Card, {\n              index: index,\n              flight: flight,\n              onRemove: removeFromRotation\n            }, flight.ident, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(DroppableList, {\n        title: \"Available Flights\",\n        children: /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: provided => /*#__PURE__*/_jsxDEV(List, {\n            innerRef: provided.innerRef,\n            children: [availableFlights.map((flight, index) => /*#__PURE__*/_jsxDEV(Flight, {\n              index: index,\n              flight: flight\n            }, flight.ident, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 37\n            }, this)), provided.placeholder]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Dashboard, \"boKqTe8bAXH3lvY/76kLyq4hZL4=\");\n\n_c2 = Dashboard;\nexport default Dashboard;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Dashboard\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/components/Dashboard/Dashboard.jsx"],"names":["React","useState","useMemo","useCallback","DragDropContext","Droppable","AircraftCard","Flight","List","move","Timeline","DroppableList","checkIfValid","aircrafts","flights","calculateTimePeriods","calculateUsage","styled","RotationCard","Wrapper","div","Header","h2","Dashboard","rotation","setRotation","availableFlights","setAvailableFlights","periods","usage","removeFromRotation","ident","flight","find","f","filter","prev","onDragEnd","result","source","destination","draggableId","droppableId","index","r","droppable","map","aircraft","provided","innerRef","placeholder"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useCallback } from \"react\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport { AircraftCard } from \"../AircraftCard\";\nimport Flight from \"../Flight/Flight\";\nimport { List } from \"../List\";\nimport { move } from \"../../utils/helpers/dnd\";\nimport { Timeline } from \"../Timeline\";\nimport DroppableList from \"../DroppableList/DroppableList\";\nimport { checkIfValid } from \"../../utils/helpers/validations\";\nimport { aircrafts, flights } from \"../../utils/data\";\nimport { calculateTimePeriods, calculateUsage } from \"../../utils/helpers/timeline\";\nimport styled from \"styled-components\";\nimport RotationCard from \"../RotationCard/RotationCard\";\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n    width: 100%;\n`;\n\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n\nfunction Dashboard() {\n    const [ rotation, setRotation ] = useState([]);\n    const [ availableFlights, setAvailableFlights ] = useState(flights);\n\n    const periods = useMemo(() => calculateTimePeriods(rotation), [rotation]);\n    const usage = useMemo(() => calculateUsage(periods), [periods]);\n\n    const removeFromRotation = useCallback((ident) => {\n        const flight = rotation.find(f => f.ident === ident);\n        setRotation(rotation.filter(f => f !== flight));\n        setAvailableFlights(prev => [ flight, ...prev ]);\n\n    }, [rotation])\n\n    const onDragEnd = (result) => {\n        const { source, destination, draggableId } = result;\n\n        if (!destination || source.droppableId == \"rotation\" || destination.droppableId === \"droppable\" ) {\n            return;\n        }\n\n        if (destination.droppableId == \"rotation\") {\n\n            // Departure Airport of the flight must be the same of the previous flight\n            if(checkIfValid(flights, rotation, draggableId, destination.index)) {\n                const r = move(availableFlights, rotation, source, destination);\n                setRotation(r.rotation);\n                setAvailableFlights(r.droppable);\n            }\n            \n            return;\n        }\n    };\n\n    return (\n        <DragDropContext onDragEnd={onDragEnd}>\n            <Wrapper>\n\n                {/* Aircrafts List */}\n                <DroppableList title=\"Aircrafts\" >\n                    <List>\n                        {aircrafts.map((aircraft) => (\n                            <Card key={aircraft.ident} aircraft={aircraft} percentage={usage} />\n                        ))}\n                    </List>\n                </DroppableList>\n                {/* Rotation */}\n\n                <DroppableList title=\"Rotation\" >\n                    <Droppable droppableId=\"rotation\">\n                        {(provided) => (\n                            <List innerRef={provided.innerRef}>\n                                {rotation.map((flight, index) => (\n                                    <Card\n                                    key={flight.ident}\n                                    index={index}\n                                    flight={flight}\n                                    onRemove={removeFromRotation}/>)\n                                )}\n                            {provided.placeholder}\n                        </List>)}\n                    </Droppable>\n                </DroppableList>\n\n                {/* Flight List */}\n                <DroppableList title=\"Available Flights\" >\n                    <Droppable droppableId=\"droppable\">\n                        {(provided) => (\n                            <List innerRef={provided.innerRef}>\n                                {availableFlights.map((flight, index) => (\n                                    <Flight\n                                        key={flight.ident}\n                                        index={index}\n                                        flight={flight}\n                                    />)\n                                )}\n                                {provided.placeholder}\n                            </List>)}\n                    </Droppable>\n                </DroppableList>\n            </Wrapper>\n        </DragDropContext>);\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}