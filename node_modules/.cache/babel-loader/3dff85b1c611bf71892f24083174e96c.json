{"ast":null,"code":"var _jsxFileName = \"/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/App.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable react/jsx-indent */\n\n/* eslint-disable indent */\nimport React, { useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { AircraftCard } from \"./components/AircraftCard\";\nimport { FlightCard } from \"./components/FlightCard\";\nimport { List } from \"./components/List\";\nimport { RotationCard } from \"./components/RotationCard\";\nimport { aircrafts, flights } from \"./utils/data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n_c = Wrapper;\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n_c2 = Header;\n\nfunction App() {\n  _s();\n\n  const [rotation, setRotation] = useState([]);\n  const [availableFlights, setAvailableFlights] = useState(flights); // const onDragStart = useCallback((e, id) => {\n  //     e.dataTransfer.setData(\"id\", id);\n  // }, []);\n  // const onDrop = useCallback((e) => {\n  //     let id = e.dataTransfer.getData(\"id\");\n  //     const flight = flights.filter((f) => f.ident === id);\n  //     setRotation((prev) => ([ ...prev, flight ]));\n  //     // Conditions to add\n  //     // 1 - Airport of arrival from the previous flight should be the airport of departure of the next flight\n  //     // 2 - The time difference between the time of arrival of the previous flight and the departure of the next \n  //     //  has to be 15 minutes or higher\n  //     setAvailableFlights(prev => prev.filter((p) =>  p.ident !== id));\n  // }, []);\n  // const onDragOver = (e) => {\n  //     e.preventDefault();\n  // };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: result => console.log(result),\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Header\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Wrapper, {\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          children: \"Aircrafts\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          children: aircrafts.map(aircraft => /*#__PURE__*/_jsxDEV(AircraftCard, {\n            aircraft: aircraft\n          }, aircraft.ident, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n          droppableId: \"droppable\",\n          children: (provided, snapshot) => /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(List, {\n              innerRef: provided.innerRef,\n              children: availableFlights.map((flight, index) => {\n                return /*#__PURE__*/_jsxDEV(Draggable, {\n                  draggableId: flight.ident,\n                  index: index,\n                  children: provided =>\n                  /*#__PURE__*/\n                  // <FlightCard\n                  //     innerRef={provided.innerRef}\n                  //     {...provided.draggableProps}\n                  //     {...provided.dragHandleProps}\n                  //     dragProps={provided}\n                  //     key={flight.ident} \n                  //     flight={flight}\n                  //     // onDragStart={(e) => onDragStart(e, flight.ident)}\n                  //     />\n                  _jsxDEV(\"div\", {\n                    ref: provided.innerRef,\n                    ...provided.draggableProps,\n                    ...provided.dragHandleProps,\n                    children: /*#__PURE__*/_jsxDEV(\"h2\", {\n                      children: flight.ident\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 84,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 83,\n                    columnNumber: 49\n                  }, this)\n                }, flight.ident, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 41\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(List, {\n              innerRef: provided.innerRef // onDragOver={onDragOver}\n              // onDrop={onDrop}\n              ,\n              ...provided.droppableProps,\n              children: rotation.map(flight => /*#__PURE__*/_jsxDEV(RotationCard, {\n                flight: flight\n              }, flight.ident, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 37\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"eCSK5ooBkWc7OjBs6VEQpkrhFMg=\");\n\n_c3 = App;\nexport default App;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"sources":["/Users/flaviafigueiredo/Documents/Github/flavia-aircraft-scheduling/src/App.jsx"],"names":["React","useState","DragDropContext","Draggable","Droppable","styled","AircraftCard","FlightCard","List","RotationCard","aircrafts","flights","Wrapper","div","Header","h2","App","rotation","setRotation","availableFlights","setAvailableFlights","result","console","log","map","aircraft","ident","provided","snapshot","innerRef","flight","index","draggableProps","dragHandleProps","droppableProps"],"mappings":"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","sourcesContent":["/* eslint-disable react/jsx-indent */\n/* eslint-disable indent */\nimport React, { useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport { AircraftCard } from \"./components/AircraftCard\";\nimport { FlightCard } from \"./components/FlightCard\";\nimport { List } from \"./components/List\";\nimport { RotationCard } from \"./components/RotationCard\";\nimport { aircrafts, flights } from \"./utils/data\";\n\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nconst Header = styled.h2`\n    padding-bottom: 5px;\n`;\n\nfunction App() {\n    const [ rotation, setRotation ] = useState([]);\n    const [ availableFlights, setAvailableFlights ] = useState(flights);\n\n    // const onDragStart = useCallback((e, id) => {\n    //     e.dataTransfer.setData(\"id\", id);\n    // }, []);\n\n    // const onDrop = useCallback((e) => {\n    //     let id = e.dataTransfer.getData(\"id\");\n    //     const flight = flights.filter((f) => f.ident === id);\n\n    //     setRotation((prev) => ([ ...prev, flight ]));\n\n    //     // Conditions to add\n    //     // 1 - Airport of arrival from the previous flight should be the airport of departure of the next flight\n    //     // 2 - The time difference between the time of arrival of the previous flight and the departure of the next \n    //     //  has to be 15 minutes or higher\n    //     setAvailableFlights(prev => prev.filter((p) =>  p.ident !== id));\n    // }, []);\n\n    // const onDragOver = (e) => {\n    //     e.preventDefault();\n    // };\n\n    return (\n        <DragDropContext onDragEnd={result => console.log(result)}>\n            <div className=\"App\">\n                <div>Header</div>\n                <Wrapper>\n                    <Header>Aircrafts</Header>\n                    <List>\n                        {aircrafts.map((aircraft) => (\n                            <AircraftCard\n                                key={aircraft.ident}\n                                aircraft={aircraft}\n                            />\n                        ))}\n                    </List>\n                    <Droppable droppableId={\"droppable\"}>\n                        {(provided, snapshot) => (\n                            <>\n                            {/* <Header>Rotation</Header> */}\n                           \n                            {/* <Header>Flights</Header> */}\n                            <List innerRef={provided.innerRef}>\n                                {availableFlights.map((flight, index) => { \n                                    return (\n                                        <Draggable key={flight.ident} draggableId={flight.ident} index={index}>\n                                            {(provided) => (\n                                                // <FlightCard\n                                                //     innerRef={provided.innerRef}\n                                                //     {...provided.draggableProps}\n                                                //     {...provided.dragHandleProps}\n                                                //     dragProps={provided}\n                                                //     key={flight.ident} \n                                                //     flight={flight}\n                                                //     // onDragStart={(e) => onDragStart(e, flight.ident)}\n                                                //     />\n\n                                                <div ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\n                                                    <h2>{flight.ident}</h2>\n                                                </div>\n                                                    \n                                                )}\n                                        </Draggable>);\n                                    }\n                                    )}\n                            </List>\n                            <List\n                                innerRef={provided.innerRef}\n                                // onDragOver={onDragOver}\n                                // onDrop={onDrop}\n                                {...provided.droppableProps}>\n                                {rotation.map((flight) => (\n                                    <RotationCard\n                                        key={flight.ident}\n                                        flight={flight}\n                                    />\n                                ))}\n                            </List>\n                            </>\n                            )}\n                    </Droppable>\n                </Wrapper>\n                       {/* <Draggable draggableId=\"draggable-1\" index={0}>\n                       {(provided, snapshot) => (\n                         <div ref={provided.innerRef} {...provided.draggableProps}>\n                           <h2>Hello there</h2>\n                           <div {...provided.dragHandleProps}>Drag handle</div>\n                         </div>\n                       )}\n                     </Draggable>) */}\n            </div>\n        </DragDropContext>\n    );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}